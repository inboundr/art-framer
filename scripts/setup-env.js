#!/usr/bin/env node

/**
 * Environment Setup Script
 * Helps users set up their environment variables for Art Framer
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const ENV_FILE = path.join(__dirname, '..', '.env.local');
const TEMPLATE_FILE = path.join(__dirname, '..', 'env.template');

async function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

async function setupEnvironment() {
  console.log('🎨 Art Framer Environment Setup\n');
  console.log('This script will help you set up your environment variables.\n');

  // Check if .env.local already exists
  if (fs.existsSync(ENV_FILE)) {
    const overwrite = await question('.env.local already exists. Overwrite? (y/N): ');
    if (overwrite.toLowerCase() !== 'y' && overwrite.toLowerCase() !== 'yes') {
      console.log('Setup cancelled. Your existing .env.local file was not modified.');
      rl.close();
      return;
    }
  }

  console.log('Please provide the following required environment variables:\n');

  const config = {};

  // Supabase Configuration
  console.log('📊 Supabase Configuration');
  console.log('Get these from your Supabase project dashboard (https://app.supabase.com)');
  config.NEXT_PUBLIC_SUPABASE_URL = await question('Supabase URL: ');
  config.NEXT_PUBLIC_SUPABASE_ANON_KEY = await question('Supabase Anon Key: ');
  config.SUPABASE_SERVICE_ROLE_KEY = await question('Supabase Service Role Key: ');
  console.log('');

  // Stripe Configuration
  console.log('💳 Stripe Configuration');
  console.log('Get these from your Stripe dashboard (https://dashboard.stripe.com)');
  config.STRIPE_SECRET_KEY = await question('Stripe Secret Key: ');
  const stripePublishable = await question('Stripe Publishable Key (optional): ');
  if (stripePublishable) config.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY = stripePublishable;
  console.log('');

  // Ideogram AI Configuration
  console.log('🎨 Ideogram AI Configuration');
  console.log('Get this from your Ideogram account (https://ideogram.ai)');
  config.IDEOGRAM_API_KEY = await question('Ideogram API Key: ');
  console.log('');

  // Prodigi Configuration
  console.log('🖼️ Prodigi Configuration');
  console.log('Get these from your Prodigi account (https://www.prodigi.com)');
  config.PRODIGI_API_KEY = await question('Prodigi API Key: ');
  const prodigiEnv = await question('Prodigi Environment (sandbox/production) [sandbox]: ');
  config.PRODIGI_ENVIRONMENT = prodigiEnv || 'sandbox';
  console.log('');

  // Optional configurations
  const includeOptional = await question('Include optional configurations? (y/N): ');
  if (includeOptional.toLowerCase() === 'y' || includeOptional.toLowerCase() === 'yes') {
    console.log('\n📈 Optional Configurations');
    
    const analyticsId = await question('Analytics ID (optional): ');
    if (analyticsId) config.NEXT_PUBLIC_ANALYTICS_ID = analyticsId;
    
    const sentryDsn = await question('Sentry DSN (optional): ');
    if (sentryDsn) config.NEXT_PUBLIC_SENTRY_DSN = sentryDsn;
    
    const resendKey = await question('Resend API Key (optional): ');
    if (resendKey) config.RESEND_API_KEY = resendKey;
    
    const contactEmail = await question('Contact Email [support@artframer.com]: ');
    config.NEXT_PUBLIC_CONTACT_EMAIL = contactEmail || 'support@artframer.com';
    
    const appUrl = await question('App URL [http://localhost:3000]: ');
    config.NEXT_PUBLIC_APP_URL = appUrl || 'http://localhost:3000';
  }

  // Generate .env.local content
  let envContent = '# Art Framer Environment Variables\n';
  envContent += '# Generated by setup script\n\n';

  envContent += '# Supabase Configuration\n';
  envContent += `NEXT_PUBLIC_SUPABASE_URL=${config.NEXT_PUBLIC_SUPABASE_URL}\n`;
  envContent += `NEXT_PUBLIC_SUPABASE_ANON_KEY=${config.NEXT_PUBLIC_SUPABASE_ANON_KEY}\n`;
  envContent += `SUPABASE_SERVICE_ROLE_KEY=${config.SUPABASE_SERVICE_ROLE_KEY}\n\n`;

  envContent += '# Stripe Configuration\n';
  envContent += `STRIPE_SECRET_KEY=${config.STRIPE_SECRET_KEY}\n`;
  if (config.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY) {
    envContent += `NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${config.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY}\n`;
  }
  envContent += '\n';

  envContent += '# Ideogram AI Configuration\n';
  envContent += `IDEOGRAM_API_KEY=${config.IDEOGRAM_API_KEY}\n\n`;

  envContent += '# Prodigi Configuration\n';
  envContent += `PRODIGI_API_KEY=${config.PRODIGI_API_KEY}\n`;
  envContent += `PRODIGI_ENVIRONMENT=${config.PRODIGI_ENVIRONMENT}\n\n`;

  if (config.NEXT_PUBLIC_ANALYTICS_ID || config.NEXT_PUBLIC_SENTRY_DSN) {
    envContent += '# Analytics and Monitoring\n';
    if (config.NEXT_PUBLIC_ANALYTICS_ID) {
      envContent += `NEXT_PUBLIC_ANALYTICS_ID=${config.NEXT_PUBLIC_ANALYTICS_ID}\n`;
    }
    if (config.NEXT_PUBLIC_SENTRY_DSN) {
      envContent += `NEXT_PUBLIC_SENTRY_DSN=${config.NEXT_PUBLIC_SENTRY_DSN}\n`;
    }
    envContent += '\n';
  }

  if (config.RESEND_API_KEY || config.NEXT_PUBLIC_CONTACT_EMAIL) {
    envContent += '# Email Configuration\n';
    if (config.RESEND_API_KEY) {
      envContent += `RESEND_API_KEY=${config.RESEND_API_KEY}\n`;
    }
    if (config.NEXT_PUBLIC_CONTACT_EMAIL) {
      envContent += `NEXT_PUBLIC_CONTACT_EMAIL=${config.NEXT_PUBLIC_CONTACT_EMAIL}\n`;
    }
    envContent += '\n';
  }

  if (config.NEXT_PUBLIC_APP_URL) {
    envContent += '# App Configuration\n';
    envContent += `NEXT_PUBLIC_APP_URL=${config.NEXT_PUBLIC_APP_URL}\n`;
  }

  // Write the file
  try {
    fs.writeFileSync(ENV_FILE, envContent);
    console.log('\n✅ Environment setup complete!');
    console.log(`📁 Created: ${ENV_FILE}`);
    console.log('\nNext steps:');
    console.log('1. Review your .env.local file');
    console.log('2. Run "npm run build" to test the configuration');
    console.log('3. Run "npm run dev" to start development');
    console.log('\n🎉 Happy coding!');
  } catch (error) {
    console.error('❌ Error writing .env.local file:', error.message);
  }

  rl.close();
}

// Validation function
function validateConfiguration() {
  if (!fs.existsSync(ENV_FILE)) {
    console.log('❌ .env.local file not found. Run "npm run setup-env" first.');
    return false;
  }

  const envContent = fs.readFileSync(ENV_FILE, 'utf8');
  const requiredVars = [
    'NEXT_PUBLIC_SUPABASE_URL',
    'NEXT_PUBLIC_SUPABASE_ANON_KEY',
    'SUPABASE_SERVICE_ROLE_KEY',
    'STRIPE_SECRET_KEY',
    'IDEOGRAM_API_KEY',
    'PRODIGI_API_KEY'
  ];

  const missing = [];
  for (const varName of requiredVars) {
    if (!envContent.includes(`${varName}=`) || envContent.includes(`${varName}=your_`)) {
      missing.push(varName);
    }
  }

  if (missing.length > 0) {
    console.log('❌ Missing or incomplete environment variables:');
    missing.forEach(varName => console.log(`  - ${varName}`));
    console.log('\nRun "npm run setup-env" to configure them.');
    return false;
  }

  console.log('✅ Environment configuration looks good!');
  return true;
}

// CLI interface
const command = process.argv[2];

if (command === 'validate') {
  validateConfiguration();
} else {
  setupEnvironment();
}
